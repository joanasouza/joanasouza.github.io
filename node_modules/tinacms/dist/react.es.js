import React from "react";
function useTina(props) {
  const [data, setData] = React.useState(props.data);
  const [isClient, setIsClient] = React.useState(false);
  const id = JSON.stringify({ query: props.query, variables: props.variables });
  React.useEffect(() => {
    setIsClient(true);
    setData(props.data);
  }, [id]);
  React.useEffect(() => {
    parent.postMessage({ type: "open", ...props, id }, window.location.origin);
    window.addEventListener("message", (event) => {
      if (event.data.id === id && event.data.type === "updateData") {
        setData(event.data.data);
      }
    });
    return () => {
      parent.postMessage({ type: "close", id }, window.location.origin);
    };
  }, [id]);
  return { data, isClient };
}
function useEditState() {
  const [edit, setEdit] = React.useState(false);
  React.useEffect(() => {
    if (typeof window !== "undefined") {
      parent.postMessage({ type: "isEditMode" }, window.location.origin);
      window.addEventListener("message", (event) => {
        var _a;
        if (((_a = event.data) == null ? void 0 : _a.type) === "tina:editMode") {
          setEdit(true);
        }
      });
    }
  }, []);
  return { edit };
}
const tinaField = (obj, field) => {
  var _a, _b, _c;
  if (!field) {
    return `${(_a = obj._tina_metadata) == null ? void 0 : _a.id}#${(_b = obj._tina_metadata) == null ? void 0 : _b.name}`;
  }
  if (obj == null ? void 0 : obj._tina_metadata) {
    if (typeof field === "string") {
      return `${(_c = obj._tina_metadata) == null ? void 0 : _c.id}#${obj._tina_metadata.fields[field]}`;
    }
  }
  return "";
};
export { tinaField, useEditState, useTina };
